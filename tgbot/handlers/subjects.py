from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram import types
from aiogram.dispatcher.filters import Text
from aiogram.types import ReplyKeyboardRemove
from aiogram.utils.markdown import hbold

from tgbot.keyboards.reply import subjects_keyboard, info_keyboard, start_keyboard
from tgbot.states.subjects import Subjects

SUBJECTS = ['–í—ã—à–∫–∞', '–ê–Ω–≥–ª', '–û–û–ü', '–í–µ–±', '–ë–ñ–î', '–¢–ê', '–≠–¢']

state2keyboard = {
    "Subjects:info_choose": info_keyboard,
    "Subjects:subject_choose": subjects_keyboard
}


async def back_to_start_menu(message: types.Message, state: FSMContext = None):
    text = [
        "You came back to start menuüòé"
    ]
    if state:
        await state.finish()

    await message.answer("\n".join(text), reply_markup=start_keyboard)


async def back_to_previous(message: types.Message, state: FSMContext = None):
    text = [
        "You came back to previous stepüòá"
    ]
    if state:
        message.bot.get("logger").info(f"{await state.get_state()}")
        await Subjects.previous()
    await message.answer("\n".join(text), reply_markup=subjects_keyboard)


async def choose_subject(message: types.Message):
    text = [
        "–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –∏ –ø–æ–µ—Ö–∞–ª–∏ü§ì"
    ]
    await message.answer("\n".join(text), reply_markup=subjects_keyboard)
    await Subjects.subject_choose.set()


async def choose_info(message: types.Message, state: FSMContext):
    chosen_subject = message.text
    if chosen_subject == "–í–µ—Ä–Ω—É—Ç—å—Å—è":
        await back_to_previous(message, state)
        return
    elif chosen_subject == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await back_to_start_menu(message, state)
        return

    text = [
        "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!",
        "–¢–µ–ø–µ—Ä—å —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å?üßê"
    ]
    await message.answer("\n".join(text), reply_markup=info_keyboard)

    await state.update_data(subject=chosen_subject)
    await Subjects.info_choose.set()


async def result(message: types.Message, state: FSMContext):
    chosen_subject = await state.get_data()
    chosen_info = message.text
    if chosen_info == "–í–µ—Ä–Ω—É—Ç—å—Å—è":
        await back_to_previous(message, state)
        return
    elif chosen_info == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await back_to_start_menu(message, state)
        return

    text = [
        "–ü–æ–¥–∏—Ç–æ–∂–∏–º, —Ç—ã —Ö–æ—á–µ—à—å:",
        f"–ü—Ä–µ–¥–º–µ—Ç - {hbold(chosen_subject.get('subject'))}, –¥–æ—Å—Ç–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é - {hbold(chosen_info)}",
        "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–∏—â—É —ç—Ç–æ –¥–ª—è —Ç–µ–±—èü§ñ"
    ]
    await message.answer("\n".join(text), reply_markup=start_keyboard)

    await state.finish()


def register_subjects_info(dp: Dispatcher):
    dp.register_message_handler(choose_subject, Text(equals="–£–Ω–∏–≤–µ—Ä"))
    dp.register_message_handler(choose_info, state=Subjects.subject_choose)
    dp.register_message_handler(result, state=Subjects.info_choose)
